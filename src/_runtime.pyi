# SPDX-FileCopyrightText: Â© 2024 Xronos Inc.
# SPDX-License-Identifier: BSD-3-Clause

import datetime
from typing import Any, Callable

class Environment:
    def __init__(
        self, workers: int, fast: bool, timeout: datetime.timedelta = ...
    ) -> None: ...
    def _execute(self, source_infos: list[SourceInfo]) -> None: ...
    def _connect(self, from_: Port, to: Port) -> None: ...
    def _connect_delayed(
        self, from_: Port, to: Port, delay: datetime.timedelta
    ) -> None: ...
    def request_shutdown(self) -> None: ...
    @property
    def _top_level_reactors(self) -> set[Reactor]: ...
    @staticmethod
    def enable_tracing(endpoint: str, application_name: str) -> None: ...

class ValidationError(Exception):
    def __init__(self, message: str) -> None: ...

class SourceInfo:
    def __init__(  # noqa: PLR0913 (too-many-arguments)
        # number of arguments is to add more classes, which would in turn need CPP
        # bindings. The complexity is not justified.
        self,
        class_name: str | None,
        function: str,
        file: str,
        fqn: list[str],
        uid: int,
        lineno: int,
        end_lineno: int,
        col_offset: int,
        end_col_offset: int,
    ) -> None:
        self.class_name: str | None
        self.function: str
        self.file: str
        self.fqn: list[str]
        self.uid: int
        self.lineno: int
        self.end_lineno: int
        self.col_offset: int
        self.end_col_offset: int

class ReactorElement:
    @property
    def _name(self) -> str: ...
    @property
    def _fqn(self) -> str: ...
    @property
    def _uid(self) -> int: ...
    @property
    def _environment(self) -> Environment: ...

class Reactor(ReactorElement):
    def __init__(self, name: str, container: Environment | Reactor) -> None: ...
    def _assemble(self) -> None: ...
    @staticmethod
    def _get_physical_time() -> datetime.datetime: ...
    def _get_logical_time(self) -> datetime.datetime: ...
    def _get_elapsed_logical_time(self) -> datetime.timedelta: ...
    @property
    def _reactor_instances(self) -> set[Reactor]: ...

class EventSource(ReactorElement):
    @property
    def _is_present(self) -> bool: ...

class SchedulableEventSource(EventSource):
    def _get(self) -> Any: ...
    def _schedule(self, value: Any, delay: datetime.timedelta) -> None: ...

class InternalEvent(SchedulableEventSource):
    def __init__(self, name: str, container: Reactor) -> None: ...

class PhysicalEvent(SchedulableEventSource):
    def __init__(self, name: str, container: Reactor) -> None: ...

class Timer(EventSource):
    def __init__(
        self,
        name: str,
        container: Reactor,
        period: datetime.timedelta,
        offset: datetime.timedelta,
    ) -> None: ...
    @property
    def _period(self) -> datetime.timedelta: ...
    @_period.setter
    def _period(self, value: datetime.timedelta) -> None: ...
    @property
    def _offset(self) -> datetime.timedelta: ...
    @_offset.setter
    def _offset(self, value: datetime.timedelta) -> None: ...

class Startup(Timer):
    def __init__(self, name: str, container: Reactor) -> None: ...

class Shutdown(Timer):
    def __init__(self, name: str, container: Reactor) -> None: ...

class Reaction(ReactorElement):
    def __init__(
        self,
        name: str,
        priority: int,
        container: Environment | Reactor,
        handler: Callable[[], None],
    ) -> None: ...
    def _declare_event_source_trigger(self, trigger: EventSource) -> None: ...
    def _declare_port_trigger(self, trigger: BasePort) -> None: ...
    def _declare_event_source_effect(self, effect: EventSource) -> None: ...
    def _declare_port_effect(self, effect: BasePort) -> None: ...
    def _declare_port_source(self, effect: BasePort) -> None: ...

class BasePort(ReactorElement):
    pass

class Port(BasePort):
    @property
    def _is_present(self) -> bool: ...
    def _set(self, value: Any) -> None: ...
    def _get(self) -> Any: ...

class Input(Port):
    def __init__(self, name: str, container: Reactor) -> None: ...

class Output(Port):
    def __init__(self, name: str, container: Reactor) -> None: ...
