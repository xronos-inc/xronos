# Getting Started

## System Requirements

- A [manylinux_2_35](https://github.com/mayeut/pep600_compliance?tab=readme-ov-file#distro-compatibility) compliant Linux distribution. We recommend [Ubuntu](https://ubuntu.com/download/desktop) 22.04 or newer.
- Python version 3.10, 3.11, or 3.12

(xronos_installation)=
## Installation

We recommend working in a virtual environment. Use the following commands to
create and load a new environment `.venv`.

```console
$ python -m venv .venv
$ source .venv/bin/activate
```

Then install the xronos package.

```
$ pip install xronos
```

(hello_world)=
## Hello World

This section shows you how to write a hello world program using xronos. Create a file called `hello.py` and paste the following content into it.

````{tabs}
```{code-tab} py plain
import xronos

class Hello(xronos.Reactor):
    @xronos.reaction
    def hello(self, interface):
        interface.add_trigger(self.startup)
        return lambda: print(f"Hello, World!")

env = xronos.Environment()
env.create_reactor("hello", Hello)
env.execute()
```

```{code-tab} py with type hints
from typing import Callable

import xronos

class Hello(xronos.Reactor):
    @xronos.reaction
    def hello(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        interface.add_trigger(self.startup)
        return lambda: print(f"Hello, World!")

env = xronos.Environment()
env.create_reactor("hello", Hello)
env.execute()
```
````

Run the program:

```console
$ python hello.py
Hello, World!
```

Let us break down the hello world program. The building blocks of xronos are called
*reactors*. We can define a new reactor by subclassing the
{class}`xronos.Reactor` base class. The example above defines a new reactor
class called `Hello`.

The behavior of a reactor is defined by its *reactions*. A new reaction can be
defined using the {attr}`xronos.reaction` decorator on a reactor method. The
decorated method is expected to accept a single argument of type
{class}`xronos.ReactionInterface` and return a callable object (e.g. a function)
that implements an event handler. Our example reactor defines a single reaction
called `hello`:

````{tabs}
```{code-tab} py plain
@xronos.reaction
def hello(self, interface):
    interface.add_trigger(self.startup)
    return lambda: print(f"Hello, World!")
```

```{code-tab} py with type hints
@xronos.reaction
def hello(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
    interface.add_trigger(self.startup)
    return lambda: print(f"Hello, World!")
```
````

The execution of xronos programs is event-based. All reaction handlers are
executed automatically in response to one or multiple triggering events. We use
the interface object to define which events trigger the reaction. In our example,
`hello` is triggered by the builtin {attr}`~xronos.Reactor.startup` event. As we
will discuss later, the interface may also be used to define *effects*, which
allow reactions to trigger new events.
The reaction handler returned by `hello` is a simple lambda function that prints
"Hello, World!".

Finally, the last three lines assemble and execute the program.

```py
env = xronos.Environment()
env.create_reactor("hello", Hello)
env.execute()
```

We first instantiate a new {class}`xronos.Environment` object, which we call
`env`. The environment manages the execution of any reactors created using the
{func}`~xronos.Environment.create_reactor` factory method. In our example, we
create a new reactor called "hello" that is an instance of the class `Hello`.
Finally, {func}`~xronos.Environment.execute` starts the execution of all
previously created reactors.

All xronos programs can be rendered into a diagram that visualizes the reactors.
This is the diagram for our hello world example.

![diagram hello](./_img/diagram_hello.png)

See {ref}`diagram` for instructions on how to generate a diagram view.

