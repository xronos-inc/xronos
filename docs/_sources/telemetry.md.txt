(telemetry)=

# Telemetry

xronos provides several mechanisms for collecting telemetry data to gain insight
into an application.

## Installation

To activate the telemetry functionality, the `telemetry` dependencies need to be
installed. Activate the same environment in which you installed the `xronos`
package, and install the telemetry backend using the following command:

```console
$ pip install xronos[telemetry]
```

## Enabling Telemetry

An application needs to explicitly enable the collection of telemetry data by
calling {func}`~xronos.Environment.enable_tracing` on the environment.
By default, this records trace data for each reaction handler that executes.

For instance, you can modify the {ref}`hello_world` example like shown below.

```{literalinclude} _examples/hello_tracing.py
:pyobject: main
```

Then execute the program.

```console
$ python hello.py
Hello, World!
[Error] File: /xronos/xronos-telemetry/build/_deps/opentelemetry-cpp-src/exporters/otlp/src/otlp_grpc_exporter.cc:114 [OTLP TRACE GRPC Exporter] Export() failed with status_code: "UNAVAILABLE" error_message: "failed to connect to all addresses; last error: UNKNOWN: ipv4:127.0.0.1:4317: Failed to connect to remote host: connect: Connection refused (111)"
```

This prints an error because we ran the program with tracing enabled, but did
not provide an endpoint for receiving the telemetry data. See {ref}`dashboard`
for instructions on how to start and use the dashboard for receiving and
visualizing telemetry data.

```{note}
{func}`~xronos.Environment.enable_tracing` throws a {exc}`RuntimeError` if `xronos[telemetry]` is not installed.
```

(attributes)=
## Attributes

All elements within the xronos framework may be annotated with attributes. The
attributes provide a mechanism for labeling the recorded data and provide a
mechanism for filtering the telemetry data in the {ref}`dashboard <dashboard>`.
By default, the following attributes are recorded:

- `host.name`: Name of the host executing the xronos program.
- `process.pid`: The process ID of the running xronos program.
- `service.name`: Name of the application as given provided in the call to {func}`~xronos.Environment.enable_tracing`.
- `xronos.fqn`: Fully qualified name of the element that produces trace data.
- `xronos.name`: Name of the element that produces trace data.
- `xronos.element_type`: Type of the element that produces trace data (e.g., "reactor", "reaction", "metric")
- `xronos.container_fqn`: Fully qualified name of the reactor that contains the element that produces trace data.

This set of attributes is sufficient to uniquely identify the origin of each
datapoint. However, you may specify additional attributes that will help you
to better identify the data you are looking for. For this, each element
has an {func}`~xronos.Reactor.add_attribute` and
{func}`~xronos.Reactor.add_attributes` method.

Each element inherits all attributes of the reactor that it is contained in. Consider
the following simplified example program. It shows the structure of a control
program for a pick-and-place robot that uses two [delta
arms](https://en.wikipedia.org/wiki/Delta_robot), where each arm consists of 3
motors.

`````{tabs}
````{group-tab} plain
```{literalinclude} _examples/attributes.py
```
````
````{group-tab} with type hints
```{literalinclude} _examples/attributes_hints.py
```
````
````{group-tab} diagram
![diagram clock](./_img/diagram_attributes.png){.bg-warning w="90%" align=center}
````
`````

The `pick_and_place` reactor has an attribute "location" that can be used to
identify the location that the robot operates in. Here it is set to "factory1".
This attribute will also be added to any reactor and element contained within
`pick_and_place`. The `DeltaArm` reactor additionally sets the "arm" attribute
to its reactor name. Finally, the `Motor` reactor sets the "motor"
attribute to its reactor name. Consequently, the reactor
`pick_and_place.Arm1.B` has the following attributes:

- "motor: "A"
- "arm": "Arm1"
- "location": "factory1"

This makes it convenient to filter telemetry data. For instance, it lets us show all
data matching a specific location or show data relating to a specific motor,
independent of the concrete arm and location. See {ref}`queries` for
instructions on how to filter telemetry data.

Note that the same attribute may not be added twice for the same element. Once
an attribute is added, its value cannot be changed. However, it is possible for
contained elements to overwrite attributes that are defined higher in the
reactor hierarchy.

(metrics)=
## Metrics

Metrics provide a convenient mechanism for recording information about the
system's state. Metrics are declared and used similarly to all other reactor
elements. A {class}`~xronos.MetricDeclaration` can be used to declare a metric
as part of a reactor. Consider the following example, which extends the `Motor`
reactor from above so that it has a metric `_current`, which is used to record
the current measured on the motor.

`````{tabs}
````{group-tab} plain
```{literalinclude} _examples/metrics.py
:pyobject: Motor
```
````
````{group-tab} with type hints
```{literalinclude} _examples/metrics_hints.py
:pyobject: Motor
```
````
````{group-tab} diagram
![diagram clock](./_img/diagram_metrics_motor.png){.bg-warning w="40%" align=center}
````
`````

When declaring a metric, a description needs to be provided and optionally a unit
can be set. It is also possible to provide additional attributes via
{class}`~xronos.MetricDeclaration` or by using
{func}`~xronos.Metric.add_attribute` or {func}`~xronos.Metric.add_attributes` on
the metric.

In the example above, the `control` reaction executes every 500 microseconds. It
reads and records the measured current using
{func}`~xronos.MetricEffect.record`. The control algorithm is omitted from the
example.

See {ref}`queries` for instruction on how to visualize data recorded from metrics.
