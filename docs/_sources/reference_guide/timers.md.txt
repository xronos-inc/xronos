(timer)=
# Timers

The xronos framework provides powerful mechanisms for implementing timed
behavior. The simplest mechanism is provided by *timers*. Copy the following
example into a new file called `timer.py`.

````{tabs}
```{code-tab} py plain

import datetime

import xronos


class Timed(xronos.Reactor):
    _timer = xronos.TimerDeclaration()

    def __init__(self, period):
        super().__init__()
        self._timer.period = period
        self._count = 0

    @xronos.reaction
    def hello(self, interface):
        interface.add_trigger(self.startup)
        return lambda: print(f"{self.get_time()}: {self.name} says 'Hello!'")

    @xronos.reaction
    def on_timer(self, interface):
        interface.add_trigger(self._timer)

        def handler():
            self._count += 1
            print(f"{self.get_time()}: {self.name}'s timer triggered (count={self._count})")
            if self._count == 11:
                self.environment.request_shutdown()

        return handler

    @xronos.reaction
    def goodbye(self, interface):
        interface.add_trigger(self.shutdown)
        return lambda: print(f"{self.get_time()}: {self.name} says 'Goodbye!'")


env = xronos.Environment()
env.create_reactor("timed", Timed, period=datetime.timedelta(seconds=1))
env.execute()
```

```{code-tab} py type hints

import datetime
from typing import Callable

import xronos


class Timed(xronos.Reactor):
    _timer = xronos.TimerDeclaration()

    def __init__(self, period: datetime.timedelta) -> None:
        super().__init__()
        self._timer.period = period
        self._count = 0

    @xronos.reaction
    def hello(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        interface.add_trigger(self.startup)
        return lambda: print(f"{self.get_time()}: {self.name} says 'Hello!'")

    @xronos.reaction
    def on_timer(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        interface.add_trigger(self._timer)

        def handler():
            self._count += 1
            print(f"{self.get_time()}: {self.name}'s timer triggered (count={self._count})")
            if self._count == 11:
                self.environment.request_shutdown()

        return handler

    @xronos.reaction
    def goodbye(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        interface.add_trigger(self.shutdown)
        return lambda: print(f"{self.get_time()}: {self.name} says 'Goodbye!'")


env = xronos.Environment()
env.create_reactor("timed", Timed, period=datetime.timedelta(seconds=1))
env.execute()
```
```{group-tab} diagram
![diagram timed](./_img/diagram_timed.png){.bg-warning w="50%" align=center}
```
````

In xronos, a timer can be created by instantiating
{class}`xronos.TimerDeclaration` as a class attribute. This declares a
{class}`~xronos.Timer` object that is automatically initialized by the xronos
runtime. We can interact with the timer object simply by using `self._timer`.

Note that the `__init__` method of `Timed` configures the timer's period
according to an argument that it receives. It further defines the state variable
`self._count` and sets it to 0.

The `Timed` reactor defines three reactions. The `hello` reaction is similar to
the reaction in our "Hello, World!" example. It prints the current time, the
reactors name and 'Hello!'. The `goodbye` reaction produces a similar output in
response to the builtin {attr}`~xronos.Reactor.shutdown` event.

The reaction `on_timer` declares timer as its trigger and defines a reaction
handler that is a little bit more complex than the simple lambda function we
have seen so far. The reaction defines a nested `handler` function that it then
returns.

```python
def handler():
    self._count += 1
    print(f"{self.get_time()}: {self.name}'s timer triggered (count={self._count})")
    if self._count == 11:
        self.environment.request_shutdown()
```

The handler performs multiple steps. First, it increments the `self._count`
variable. It then prints the current time, the timer's fully qualified name and
the current count. Finally, it checks if the count has reached 11, in which
{func}`xronos.Environment.request_shutdown` is called to terminate the program.

The program runs for about 10 seconds and produces output similar to the following:
```console
$ python timer.py
2024-11-11 17:02:30.549478: timed says 'Hello!'
2024-11-11 17:02:30.549478: timed._timer triggered (count=1)
2024-11-11 17:02:31.549478: timed._timer triggered (count=2)
2024-11-11 17:02:32.549478: timed._timer triggered (count=3)
2024-11-11 17:02:33.549478: timed._timer triggered (count=4)
2024-11-11 17:02:34.549478: timed._timer triggered (count=5)
2024-11-11 17:02:35.549478: timed._timer triggered (count=6)
2024-11-11 17:02:36.549478: timed._timer triggered (count=7)
2024-11-11 17:02:37.549478: timed._timer triggered (count=8)
2024-11-11 17:02:38.549478: timed._timer triggered (count=9)
2024-11-11 17:02:39.549478: timed._timer triggered (count=10)
2024-11-11 17:02:40.549478: timed._timer triggered (count=11)
2024-11-11 17:02:40.549478: timed says 'Goodbye!'
```

Carefully look at the printed timestamps. The timestamp printed by `hello` is
identical to the first line printed by `on_timer`. This is, because we did not
configure an {attr}`~xronos.Timer.offset` and the fist event triggers
immediately at startup. In other words: the first timer event is simultaneous to
the {attr}`~xronos.Reactor.startup` event. Also note that the individual timer
events are perfectly spaced one second apart.

How can xronos achieve such a precision? In xronos, time behaves differently
than the wall-clock time that computer programs usually use. The xronos runtime
manages its own clock, and this clock is key to controlling how a program
executes. One property of the internal clock is that the time observed by a
reaction is equal to the timestamp of the triggering event. Moreover, any two
calls to {func}`~xronos.Reactor.get_time` within the same reaction handler will
return the same time value.

The synchrony of timestamps is also preserved across multiple reactors. Modify
the instantiation code as shown in the following, so that the program consists
of three `Timed` reactors using a period of 1 second, 2 seconds and 3 seconds,
respectively.

````{tabs}
```{code-tab} python plain
env = xronos.Environment()
env.create_reactor("timed1", Timed, period=datetime.timedelta(seconds=1))
env.create_reactor("timed2", Timed, period=datetime.timedelta(seconds=2))
env.create_reactor("timed3", Timed, period=datetime.timedelta(seconds=3))
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
env.create_reactor("timed1", Timed, period=datetime.timedelta(seconds=1))
env.create_reactor("timed2", Timed, period=datetime.timedelta(seconds=2))
env.create_reactor("timed3", Timed, period=datetime.timedelta(seconds=3))
env.execute()
```
```{group-tab} diagram
![diagram timed times 3](./_img/diagram_timed_3.png){.bg-warning w="80%" align=center}
```
````

Running the program produces output similar to the following:

```console
$ python timer.py
2024-11-11 17:15:59.856537: timed3 says 'Hello!'
2024-11-11 17:15:59.856537: timed1 says 'Hello!'
2024-11-11 17:15:59.856537: timed2 says 'Hello!'
2024-11-11 17:15:59.856537: timed3._timer triggered (count=1)
2024-11-11 17:15:59.856537: timed1._timer triggered (count=1)
2024-11-11 17:15:59.856537: timed2._timer triggered (count=1)
2024-11-11 17:16:00.856537: timed1._timer triggered (count=2)
2024-11-11 17:16:01.856537: timed1._timer triggered (count=3)
2024-11-11 17:16:01.856537: timed2._timer triggered (count=2)
2024-11-11 17:16:02.856537: timed3._timer triggered (count=2)
2024-11-11 17:16:02.856537: timed1._timer triggered (count=4)
2024-11-11 17:16:03.856537: timed1._timer triggered (count=5)
2024-11-11 17:16:03.856537: timed2._timer triggered (count=3)
2024-11-11 17:16:04.856537: timed1._timer triggered (count=6)
2024-11-11 17:16:05.856537: timed3._timer triggered (count=3)
2024-11-11 17:16:05.856537: timed1._timer triggered (count=7)
2024-11-11 17:16:05.856537: timed2._timer triggered (count=4)
2024-11-11 17:16:06.856537: timed1._timer triggered (count=8)
2024-11-11 17:16:07.856537: timed1._timer triggered (count=9)
2024-11-11 17:16:07.856537: timed2._timer triggered (count=5)
2024-11-11 17:16:08.856537: timed3._timer triggered (count=4)
2024-11-11 17:16:08.856537: timed1._timer triggered (count=10)
2024-11-11 17:16:09.856537: timed1._timer triggered (count=11)
2024-11-11 17:16:09.856537: timed2._timer triggered (count=6)
2024-11-11 17:16:09.856537: timed3 says 'Goodbye!'
2024-11-11 17:16:09.856537: timed1 says 'Goodbye!'
2024-11-11 17:16:09.856537: timed2 says 'Goodbye!'
```

Note how all three reactors say 'Hello!' or 'Goodbye!' at the same time, and how
the timestamps of individual timer events align between the reactors.
