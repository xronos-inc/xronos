# Ports and Connections

Reactors may send and receive messages to or from other reactors using input and
output ports. The ports of a reactor define its interface. Outputs of one
reactor may be connected to the inputs of others, which gives a mechanism for
composing programs from simple building blocks.

In the following examples, we assume the following imports are used:
```python
import datetime
from typing import Callable
import xronos
```

## Simple Connections

Consider the following reactor.

````{tabs}
```{code-tab} py plain
class Counter(xronos.Reactor):
    output = xronos.OutputPortDeclaration()
    _timer = xronos.TimerDeclaration(period=datetime.timedelta(milliseconds=100))

    def __init__(self) -> None:
        super().__init__()
        self._count = 0

    @xronos.reaction
    def count(self, interface):
        interface.add_trigger(self._timer)
        output_effect = interface.add_effect(self.output)

        def handler() -> None:
            self._count += 1
            output_effect.value = self._count

        return handler
```

```{code-tab} py type hints
class Counter(xronos.Reactor):
    output = xronos.OutputPortDeclaration[int]()
    _timer = xronos.TimerDeclaration(period=datetime.timedelta(milliseconds=100))

    def __init__(self) -> None:
        super().__init__()
        self._count = 0

    @xronos.reaction
    def count(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        interface.add_trigger(self._timer)
        output_effect = interface.add_effect(self.output)

        def handler() -> None:
            self._count += 1
            output_effect.value = self._count

        return handler
```

```{group-tab} diagram
![diagram connection](./_img/diagram_ports_counter.png){.bg-warning w="35%" align=center}
```
````

It implements a counting mechanism, similar to the `Timed` reactor that we
considered before. In addition to the timer, it also declares an output port
called `output` using an {class}`~xronos.OutputPortDeclaration`. The `increment`
reaction is triggered by the timer. In addition to the trigger, the reaction
also declares an *effect* using {func}`~xronos.ReactionInterface.add_effect`.
This returns a {class}`~xronos.PortEffect` object, which the handler may use to
write a value to the port using the {attr}`~xronos.PortEffect.value` attribute.
Writing a value to the port notifies any reactions that are triggered by a connected port.

For instance, we can define a `Printer` reactor that prints any object that it receives.

````{tabs}
```{code-tab} py plain
class Printer(xronos.Reactor):
    input_ = xronos.InputPortDeclaration()

    @xronos.reaction
    def print(self, interface):
        input_trigger = interface.add_trigger(self.input_)

        return lambda: print(f"{self.name} received {input_trigger.value} at {self.get_time_since_startup()}")
```

```{code-tab} py type hints
class Printer(xronos.Reactor):
    input_ = xronos.InputPortDeclaration[int]()

    @xronos.reaction
    def print(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        input_trigger = interface.add_trigger(self.input_)

        return lambda: print(f"{self.name} received {input_trigger.value} at {self.get_time_since_startup()}")
```

```{group-tab} diagram
![diagram counter](./_img/diagram_ports_printer.png){.bg-warning w="22%" align=center}
```
````

This reactor uses an {class}`~xronos.InputPortDeclaration` to declare an input
port called `input_`. The reaction uses
{func}`~xronos.ReactionInterface.add_trigger` to declare the input port as its
trigger. The returned {class}`~xronos.Trigger` object can be used to read the
received value using the {attr}`~xronos.Trigger.value` attribute.

Now we can write a script that instantiates and connects both reactors.

````{tabs}
```{code-tab} python plain
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
env.connect(counter.output, printer.input_)
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
env.connect(counter.output, printer.input_)
env.execute()
```
```{group-tab} diagram
![diagram printer](./_img/diagram_ports_simple.png){.bg-warning w="60%" align=center}
```
````

Executing this program yields output similar to the following:
```console
printer received 1 at 0:00:00
printer received 2 at 0:00:00.100000
printer received 3 at 0:00:00.200000
printer received 4 at 0:00:00.300000
printer received 5 at 0:00:00.400000
printer received 6 at 0:00:00.500000
printer received 7 at 0:00:00.600000
printer received 8 at 0:00:00.700000
printer received 9 at 0:00:00.800000
...
```

This program will execute indefinitely as the timer will always produce new
events and we do not use {func}`~xronos.Environment.request_shutdown`. Use
{kbd}`Ctrl`+{kbd}`C` to abort the execution. If the program defines any
reactions to {attr}`~xronos.Reactor.shutdown`, these will be invoked after the
termination signal is received.

Note that `printer` receives the first message right at startup, and all
subsequent messages are spaced perfectly by the timer period of 100ms. As
mentioned in {ref}`timer`, time does not advance while reactions execute. This
is also true for any messages sent via ports. The timestamp of any output
produced by a reaction is equal to the timestamp of its trigger.

## Delayed Connections

Sometimes it is useful to delay messages so that they are processed at a later
point in time. The {func}`~xronos.Environment.connect` method accepts an
optional `delay` argument. If it is set, the connection will output the message
on the receiving side precisely at `get_time() + delay`.

For instance, we can make the following modification to delay all messages by 1s:
````{tabs}
```{code-tab} python plain
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
env.connect(counter.output, printer.input_, delay=datetime.timedelta(seconds=1))
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
env.connect(counter.output, printer.input_, delay=datetime.timedelta(seconds=1))
env.execute()
```
```{group-tab} diagram
![diagram delayed connection](./_img/diagram_ports_delayed.png){.bg-warning w="65%" align=center}
```
````

This produces the following output after waiting for 1s:
```console
printer received 1 at 0:00:01
printer received 2 at 0:00:01.100000
printer received 3 at 0:00:01.200000
printer received 4 at 0:00:01.300000
printer received 5 at 0:00:01.400000
printer received 6 at 0:00:01.500000
printer received 7 at 0:00:01.600000
printer received 8 at 0:00:01.700000
printer received 9 at 0:00:01.800000
...
```

## Multiple Inputs

Reactors may define an arbitrary number of input and output ports. While in
prior examples all reactions had a single trigger, it is also possible to
trigger reactions by multiple inputs. Consider the following `Multiplier` reactor.

````{tabs}
```{code-tab} python plain
class Multiplier(xronos.Reactor):
    factor1 = xronos.InputPortDeclaration()
    factor2 = xronos.InputPortDeclaration()
    product = xronos.OutputPortDeclaration()

    @xronos.reaction
    def multiply(self, interface):
        factor1_trigger = interface.add_trigger(self.factor1)
        factor2_trigger = interface.add_trigger(self.factor2)
        product_effect = interface.add_effect(self.product)

        def handler():
            if factor1_trigger.is_present and factor2_trigger.is_present:
                product_effect.value = factor1_trigger.value * factor2_trigger.value

        return handler
```
```{code-tab} python type hints
class Multiplier(xronos.Reactor):
    factor1 = xronos.InputPortDeclaration[int]()
    factor2 = xronos.InputPortDeclaration[int]()
    product = xronos.OutputPortDeclaration[int]()

    @xronos.reaction
    def multiply(self, interface: xronos.ReactionInterface) -> Callable[[], None]:
        factor1_trigger = interface.add_trigger(self.factor1)
        factor2_trigger = interface.add_trigger(self.factor2)
        product_effect = interface.add_effect(self.product)

        def handler():
            if factor1_trigger.is_present and factor2_trigger.is_present:
                product_effect.value = factor1_trigger.value * factor2_trigger.value

        return handler
```
```{group-tab} diagram
![diagram multiplier](./_img/diagram_ports_multiplier.png){.bg-warning w="40%" align=center}
```
````

It declares two input ports `factor1` and `factor2` as well as the output port
`product`. The `multiply` reaction declares both input ports as triggers.
Consequently, the reaction executes when either or both of the inputs receive a
message. The {attr}`~xronos.Trigger.is_present` attribute can be used to check
if the trigger was activated and carries a value.

```{note}
Accessing the {attr}`~xronos.Trigger.value` attribute if {attr}`~xronos.Trigger.is_present`
is `False` results in an {class}`AttributeError`.
```

If both triggers are present, the handler writes the product to the output port
using the corresponding effect. If only one of the triggers is present, then no
output is produced. Note that is also possible to define other strategies, such
as assuming a default value or storing the last observed value on `self`.

Now we have multiple options for connecting the `Multiplier` reactor with the
`Counter` and `Printer` reactors. For instance, we can create the following pattern.

````{tabs}
```{code-tab} python plain
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter.output, multiplier.factor1)
env.connect(counter.output, multiplier.factor2)
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
counter = env.create_reactor("counter", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter.output, multiplier.factor1)
env.connect(counter.output, multiplier.factor2)
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{group-tab} diagram
![diagram square numbers](./_img/diagram_ports_squared.png){.bg-warning w="80%" align=center}
```
````

This connects `counter.output` to inputs of `multiplier`, so that the same
messages are delivered to both input ports. When executed, the program prints
square numbers.

```console
printer received 1 at 0:00:00
printer received 4 at 0:00:00.100000
printer received 9 at 0:00:00.200000
printer received 16 at 0:00:00.300000
printer received 25 at 0:00:00.400000
...
```

We can also achieve the same behavior using two instances of `counter`.

````{tabs}
```{code-tab} python plain
env = xronos.Environment()
counter1 = env.create_reactor("counter1", Counter)
counter2 = env.create_reactor("counter2", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter1.output, multiplier.factor1)
env.connect(counter2.output, multiplier.factor2)
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
counter1 = env.create_reactor("counter1", Counter)
counter2 = env.create_reactor("counter2", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter1.output, multiplier.factor1)
env.connect(counter2.output, multiplier.factor2)
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{group-tab} diagram
![diagram square numbers](./_img/diagram_ports_squared2.png){.bg-warning w="80%" align=center}
```
````

Independent of how the reactors are connected, the runtime analyzes the
connections as well as the declared triggers and effects of reactions to ensure
repeatable behavior. Concretely, the `multiply` reaction does not need to wait
for inputs to arrive. The runtime ensures that any reactions that may have an
effect on `multiply`'s triggers are executed first. Thus, the values and the
`is_present` status of any trigger is guaranteed to be known when the handler
executes.

Finally, we may use delayed connections to offset the factors received by `multiplier`.

````{tabs}
```{code-tab} python plain
env = xronos.Environment()
counter1 = env.create_reactor("counter1", Counter)
counter2 = env.create_reactor("counter2", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter1.output, multiplier.factor1)
env.connect(counter2.output, multiplier.factor2, delay=datetime.timedelta(milliseconds=200))
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{code-tab} python type hints
env = xronos.Environment()
counter1 = env.create_reactor("counter1", Counter)
counter2 = env.create_reactor("counter2", Counter)
printer = env.create_reactor("printer", Printer)
multiplier = env.create_reactor("multiplier", Multiplier)
env.connect(counter1.output, multiplier.factor1)
env.connect(counter2.output, multiplier.factor2, delay=datetime.timedelta(milliseconds=200))
env.connect(multiplier.product, printer.input_)
env.execute()
```
```{group-tab} diagram
![diagram multiplier delayed](./_img/diagram_ports_multiplier_delay.png){.bg-warning w="100%" align=center}
```
````

This produces the following output.
```console
printer received 3 at 0:00:00.200000
printer received 8 at 0:00:00.300000
printer received 15 at 0:00:00.400000
printer received 24 at 0:00:00.500000
printer received 35 at 0:00:00.600000
printer received 48 at 0:00:00.700000
...
```
